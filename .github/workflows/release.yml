# .github/workflows/release.yml
name: Create Release

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for changelog generation

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        uses: scottbrenner/generate-changelog-action@master
        env:
          REPO: ${{ github.repository }}

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          body: |
            ## What's Changed
            ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false

# .github/workflows/version-bump.yml
name: Version Bump

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  version-bump:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }} # Need this to push tags

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun add -g semver

      - name: Determine version bump
        id: version
        run: |
          # Read current version from package.json
          CURRENT_VERSION=$(bun x -e "console.log(require('./package.json').version)")
          
          # Check PR labels for version bump type
          if [[ ${{ contains(github.event.pull_request.labels.*.name, 'major') }} == true ]]; then
            NEW_VERSION=$(bun x semver $CURRENT_VERSION -i major)
          elif [[ ${{ contains(github.event.pull_request.labels.*.name, 'minor') }} == true ]]; then
            NEW_VERSION=$(bun x semver $CURRENT_VERSION -i minor)
          else
            NEW_VERSION=$(bun x semver $CURRENT_VERSION -i patch)
          fi
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update package.json
        run: |
          NEW_VERSION=${{ steps.version.outputs.new_version }}
          npm version $NEW_VERSION --no-git-tag-version

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GH_PAT }}
          commit-message: "chore: bump version to ${{ steps.version.outputs.new_version }}"
          title: "chore: version bump to ${{ steps.version.outputs.new_version }}"
          body: |
            Automated version bump to ${{ steps.version.outputs.new_version }}
          branch: version-bump
          base: main
          labels: version-bump